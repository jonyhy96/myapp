// Code generated by protoc-gen-go. DO NOT EDIT.
// source: myapp.protoc

/*
Package myapp is a generated protocol buffer package.

It is generated from these files:
	myapp.protoc

It has these top-level messages:
	EchoRequest
	EchoReply
	GettimeRequest
	GettimeReply
*/
package myapp

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the user's name.
type EchoRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *EchoRequest) Reset()                    { *m = EchoRequest{} }
func (m *EchoRequest) String() string            { return proto.CompactTextString(m) }
func (*EchoRequest) ProtoMessage()               {}
func (*EchoRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *EchoRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

// The response message containing the greetings
type EchoReply struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *EchoReply) Reset()                    { *m = EchoReply{} }
func (m *EchoReply) String() string            { return proto.CompactTextString(m) }
func (*EchoReply) ProtoMessage()               {}
func (*EchoReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *EchoReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type GettimeRequest struct {
	Command string `protobuf:"bytes,1,opt,name=command" json:"command,omitempty"`
}

func (m *GettimeRequest) Reset()                    { *m = GettimeRequest{} }
func (m *GettimeRequest) String() string            { return proto.CompactTextString(m) }
func (*GettimeRequest) ProtoMessage()               {}
func (*GettimeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GettimeRequest) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

// The response message containing the greetings
type GettimeReply struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *GettimeReply) Reset()                    { *m = GettimeReply{} }
func (m *GettimeReply) String() string            { return proto.CompactTextString(m) }
func (*GettimeReply) ProtoMessage()               {}
func (*GettimeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GettimeReply) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*EchoRequest)(nil), "myapp.EchoRequest")
	proto.RegisterType((*EchoReply)(nil), "myapp.EchoReply")
	proto.RegisterType((*GettimeRequest)(nil), "myapp.GettimeRequest")
	proto.RegisterType((*GettimeReply)(nil), "myapp.GettimeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Myappserver service

type MyappserverClient interface {
	// Sends a greeting
	Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error)
	Gettime(ctx context.Context, in *GettimeRequest, opts ...grpc.CallOption) (Myappserver_GettimeClient, error)
}

type myappserverClient struct {
	cc *grpc.ClientConn
}

func NewMyappserverClient(cc *grpc.ClientConn) MyappserverClient {
	return &myappserverClient{cc}
}

func (c *myappserverClient) Echo(ctx context.Context, in *EchoRequest, opts ...grpc.CallOption) (*EchoReply, error) {
	out := new(EchoReply)
	err := grpc.Invoke(ctx, "/myapp.Myappserver/Echo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *myappserverClient) Gettime(ctx context.Context, in *GettimeRequest, opts ...grpc.CallOption) (Myappserver_GettimeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Myappserver_serviceDesc.Streams[0], c.cc, "/myapp.Myappserver/Gettime", opts...)
	if err != nil {
		return nil, err
	}
	x := &myappserverGettimeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Myappserver_GettimeClient interface {
	Recv() (*GettimeReply, error)
	grpc.ClientStream
}

type myappserverGettimeClient struct {
	grpc.ClientStream
}

func (x *myappserverGettimeClient) Recv() (*GettimeReply, error) {
	m := new(GettimeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Myappserver service

type MyappserverServer interface {
	// Sends a greeting
	Echo(context.Context, *EchoRequest) (*EchoReply, error)
	Gettime(*GettimeRequest, Myappserver_GettimeServer) error
}

func RegisterMyappserverServer(s *grpc.Server, srv MyappserverServer) {
	s.RegisterService(&_Myappserver_serviceDesc, srv)
}

func _Myappserver_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EchoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MyappserverServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myapp.Myappserver/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MyappserverServer).Echo(ctx, req.(*EchoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Myappserver_Gettime_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GettimeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MyappserverServer).Gettime(m, &myappserverGettimeServer{stream})
}

type Myappserver_GettimeServer interface {
	Send(*GettimeReply) error
	grpc.ServerStream
}

type myappserverGettimeServer struct {
	grpc.ServerStream
}

func (x *myappserverGettimeServer) Send(m *GettimeReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Myappserver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "myapp.Myappserver",
	HandlerType: (*MyappserverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _Myappserver_Echo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Gettime",
			Handler:       _Myappserver_Gettime_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "myapp.protoc",
}

func init() { proto.RegisterFile("myapp.protoc", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 187 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xc9, 0xad, 0x4c, 0x2c,
	0x28, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x4f, 0x16, 0x62, 0x05, 0xf3, 0x94, 0xd4, 0xb9, 0xb8,
	0x5d, 0x93, 0x33, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x24, 0xb8, 0xd8, 0x93,
	0xf3, 0x73, 0x73, 0x13, 0xf3, 0x52, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25,
	0x79, 0x2e, 0x4e, 0x88, 0xc2, 0x82, 0x9c, 0x4a, 0x21, 0x21, 0x2e, 0x96, 0xbc, 0xc4, 0xdc, 0x54,
	0xa8, 0x1a, 0x30, 0x5b, 0x49, 0x8b, 0x8b, 0xcf, 0x3d, 0xb5, 0xa4, 0x24, 0x33, 0x37, 0x95, 0xb0,
	0x61, 0x4a, 0x5c, 0x3c, 0x70, 0xb5, 0x38, 0xcc, 0x33, 0xaa, 0xe0, 0xe2, 0xf6, 0x05, 0x39, 0xb1,
	0x38, 0xb5, 0xa8, 0x2c, 0xb5, 0x48, 0x48, 0x8f, 0x8b, 0x05, 0x64, 0xbf, 0x90, 0x90, 0x1e, 0xc4,
	0x1b, 0x48, 0xae, 0x96, 0x12, 0x40, 0x11, 0x2b, 0xc8, 0xa9, 0x54, 0x62, 0x10, 0xb2, 0xe4, 0x62,
	0x87, 0x5a, 0x21, 0x24, 0x0a, 0x95, 0x46, 0x75, 0x9e, 0x94, 0x30, 0xba, 0x30, 0x58, 0xa3, 0x01,
	0xa3, 0x13, 0xc7, 0x22, 0x26, 0x56, 0xb0, 0xd5, 0x49, 0x6c, 0xe0, 0xc0, 0x32, 0x06, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x77, 0x10, 0x51, 0x0f, 0x3b, 0x01, 0x00, 0x00,
}
